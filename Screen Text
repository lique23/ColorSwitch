#include <fstream> // standard Windows app include
#include <iostream> // standard OpenGL include
#include <stdlib.h> // OpenGL utilties
#include <GL/glut.h>

GLfloat height = 900;
GLfloat width = 800;

using namespace std;

void introscreen();



void display(void)
{
	introscreen();
	glFlush();
	glutPostRedisplay();
}

void renderbitmap(float x, float y, void *font, char *string) {
	char *c;
	glRasterPos2f(x, y);

	for (c = string; *c != '\0'; c++) {
		glutBitmapCharacter(font, *c);
	}
}

void introscreen() {
	glColor3f(1.f, 1.f, 0.5);
	
	/*char buf[100] = { 0 };
	sprintf_s(buf, "Color"); // <--- Muda o texto aqui
	renderbitmap(0, 50, GLUT_BITMAP_TIMES_ROMAN_24, buf);
	sprintf_s(buf, "Switch"); // <--- Muda o texto aqui
	renderbitmap(0, 40, GLUT_BITMAP_TIMES_ROMAN_24, buf);*/

	GLfloat xt = -1.6, yt = 1.25, zt = 0;
	glLineWidth(10);
	glBegin(GL_LINES);                  //Basic lines are used to display Doodle jump.
		//display d
	glVertex3f(xt, yt, zt);
	glVertex3f(xt + .4, yt, zt);

	glVertex3f(xt + .4, yt, zt);
	glVertex3f(xt + .4, yt - .7, zt);

	glVertex3f(xt + .4, yt - .7, zt);
	glVertex3f(xt, yt - .7, zt);

	glVertex3f(xt + .1, yt, zt);
	glVertex3f(xt + .1, yt - .7, zt);
	//display o
	xt = xt + .5;
	glVertex3f(xt, yt, zt);
	glVertex3f(xt + .4, yt, zt);

	glVertex3f(xt + .4, yt, zt);
	glVertex3f(xt + .4, yt - .7, zt);

	glVertex3f(xt + .4, yt - .7, zt);
	glVertex3f(xt, yt - .7, zt);

	glVertex3f(xt, yt - .7, zt);
	glVertex3f(xt, yt, zt);
	//display o
	xt = xt + .5;
	glVertex3f(xt, yt, zt);
	glVertex3f(xt + .4, yt, zt);

	glVertex3f(xt + .4, yt, zt);
	glVertex3f(xt + .4, yt - .7, zt);

	glVertex3f(xt + .4, yt - .7, zt);
	glVertex3f(xt, yt - .7, zt);

	glVertex3f(xt, yt - .7, zt);
	glVertex3f(xt, yt, zt);
	//display d
	xt = xt + .5;
	glVertex3f(xt, yt, zt);
	glVertex3f(xt + .4, yt, zt);

	glVertex3f(xt + .4, yt, zt);
	glVertex3f(xt + .4, yt - .7, zt);

	glVertex3f(xt + .4, yt - .7, zt);
	glVertex3f(xt, yt - .7, zt);

	glVertex3f(xt + .1, yt, zt);
	glVertex3f(xt + .1, yt - .7, zt);
	//display l
	xt = xt + .5;
	glVertex3f(xt, yt, zt);
	glVertex3f(xt, yt - .7, zt);

	glVertex3f(xt, yt - .7, zt);
	glVertex3f(xt + .4, yt - .7, zt);
	//display e
	xt = xt + .5;
	glVertex3f(xt, yt, zt);
	glVertex3f(xt, yt - .7, zt);

	glVertex3f(xt, yt - .7, zt);
	glVertex3f(xt + .4, yt - .7, zt);

	glVertex3f(xt, yt, zt);
	glVertex3f(xt + .4, yt, zt);

	glVertex3f(xt, yt - .35, zt);
	glVertex3f(xt + .3, yt - .35, zt);
	//display j
	xt = -1.1;
	yt = yt - 1;
	glVertex3f(xt, yt, zt);
	glVertex3f(xt + .4, yt, zt);

	glVertex3f(xt + .2, yt, zt);
	glVertex3f(xt + .2, yt - .7, zt);

	glVertex3f(xt + .2, yt - .7, zt);
	glVertex3f(xt, yt - .7, zt);

	glVertex3f(xt, yt - .7, zt);
	glVertex3f(xt, yt - .5, zt);
	//display u
	xt = xt + .5;
	glVertex3f(xt, yt, zt);
	glVertex3f(xt, yt - .7, zt);

	glVertex3f(xt, yt - .7, zt);
	glVertex3f(xt + .4, yt - .7, zt);

	glVertex3f(xt + .4, yt - .7, zt);
	glVertex3f(xt + .4, yt, zt);
	//display m
	xt = xt + .5;
	glVertex3f(xt, yt, zt);
	glVertex3f(xt, yt - .7, zt);

	glVertex3f(xt, yt, zt);
	glVertex3f(xt + .2, yt - .35, zt);

	glVertex3f(xt + .2, yt - .35, zt);
	glVertex3f(xt + .4, yt, zt);

	glVertex3f(xt + .4, yt, zt);
	glVertex3f(xt + .4, yt - .7, zt);
	//display p
	xt = xt + .5;
	glVertex3f(xt, yt, zt);
	glVertex3f(xt + .3, yt, zt);

	glVertex3f(xt + .3, yt, zt);
	glVertex3f(xt + .3, yt - .3, zt);

	glVertex3f(xt + .3, yt - .3, zt);
	glVertex3f(xt, yt - .3, zt);

	glVertex3f(xt, yt, zt);
	glVertex3f(xt, yt - .7, zt);


	glEnd();
}

void reshape(GLsizei w, GLsizei h) {
	//Prevent a divide by 0
	if (h == 0) {
		h = 1;
	}

	// Set Viewport to window dimensions
	glViewport(0, 0, w, h);

	// Reset coordinate system
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// Keep the square in the same shape, this time, save calculated 
	// width and height for later use
	if (w <= h) {
		height = height * h / w;
	}
	else
	{
		width = width * w / h;
	}

	// Set the clipping volume
	glOrtho(-2.0, 2.0, -2.0, 2.0, -3.0, 3.0);


	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

int main(int arg, char** argv)
{
	glutInit(&arg, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(800, 900);
	glutInitWindowPosition(30, 30);
	glutCreateWindow("Texto OpenGL");


	glutDisplayFunc(display);
	glutReshapeFunc(reshape);

	glutMainLoop();
	return 0;
}
